Largest square formed in a matrix
Difficulty: MediumAccuracy: 36.98%Submissions: 101K+Points: 4
Given a binary matrix mat of size n * m, find out the maximum length of a side of a square sub-matrix with all 1s.

Examples:

Input: n = 6, m = 5
mat = [[0, 1, 1, 0, 1], 
       [1, 1, 0, 1, 0],
       [0, 1, 1, 1, 0],
       [1, 1, 1, 1, 0],
       [1, 1, 1, 1, 1],
       [0, 0, 0, 0, 0]]
Output: 3
Explanation: 

The maximum length of a side of the square sub-matrix is 3 where every element is 1.
Input: n = 2, m = 2
mat = [[1, 1], 
       [1, 1]]
Output: 2
Explanation: The maximum length of a side of the square sub-matrix is 2. The matrix itself is the maximum sized sub-matrix in this case.
Input: n = 2, m = 2
mat = [[0, 0], 
       [0, 0]]
Output: 0
Explanation: There is no 1 in the matrix.
Expected Time Complexity: O(n*m)
Expected Auxiliary Space: O(n*m)

Constraints:
1 ≤ n, m ≤ 500
0 ≤ mat[i][j] ≤ 1 
----------------------------------- CODE -------------------------------------
public static int maxSquare(int n, int m, int mat[][]) {
        // code here
        int S[][] = new int[2][m], Max = 0;
 
        // set all elements of S to 0 first
        for (int i = 0; i < 2; i++) {
            for (int j = 0; j < m; j++) {
                S[i][j] = 0;
            }
        }
 
        // Construct the entries
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
 
                // Compute the entrie at the current
                // position
                int Entrie = mat[i][j];
                if (Entrie != 0) {
                    if (j != 0) {
                        Entrie = 1
                                 + Math.min(
                                     S[1][j - 1],
                                     Math.min(S[0][j - 1],
                                              S[1][j]));
                    }
                }
 
                // Save the last entrie and add the new one
                S[0][j] = S[1][j];
                S[1][j] = Entrie;
 
                // Keep track of the max square length
                Max = Math.max(Max, Entrie);
            }
        }
        
        return Max;
    }
